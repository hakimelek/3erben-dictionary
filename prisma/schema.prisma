// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
    id                 String   @id @default(cuid())
    userId             String   @map("user_id")
    updatedAt          DateTime @default(now()) @updatedAt
    type               String
    provider           String
    providerAccountId  String   @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now()) @updatedAt
    email         String    @unique
    name          String
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    firstName     String?
    lastName      String?
    words         Word[]    @relation("ownedWords")
    likedWords    Like[]    @relation("likedWords")
    dislikedWords Dislike[] @relation("dislikedWords")
}

model Word {
    id               String    @id @default(cuid())
    updatedAt        DateTime  @default(now()) @updatedAt
    createdAt        DateTime  @default(now())
    owner            User?     @relation("ownedWords", fields: [ownerId], references: [id])
    ownerId          String?
    name             String?   @unique
    definition       String?
    exampleSentences String[]  @default([])
    likes            Like[]    @relation("likedWords")
    dislikes         Dislike[] @relation("dislikedWords")
    tags             String[]
}

model Like {
    id        String   @id @default(cuid())
    updatedAt DateTime @default(now()) @updatedAt
    createdAt DateTime @default(now())
    word      Word     @relation("likedWords", fields: [wordId], references: [id])
    wordId    String
    user      User?    @relation("likedWords", fields: [userId], references: [id])
    userId    String?
}

model Dislike {
    id        String   @id @default(cuid())
    updatedAt DateTime @default(now()) @updatedAt
    createdAt DateTime @default(now())
    word      Word     @relation("dislikedWords", fields: [wordId], references: [id])
    wordId    String
    user      User?    @relation("dislikedWords", fields: [userId], references: [id])
    userId    String?
}
